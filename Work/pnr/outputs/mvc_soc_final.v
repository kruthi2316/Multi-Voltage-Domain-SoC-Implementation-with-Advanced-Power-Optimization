/*
###############################################################
#  Generated by:      Cadence Innovus 19.11-s128_1
#  OS:                Linux x86_64(Host ID 09vlab099.coe.neu.edu)
#  Generated on:      Wed Aug 20 00:46:12 2025
#  Design:            top_soc
#  Command:           saveNetlist work/pnr/top_soc_mvdd_final.v
###############################################################
*/
// Generated by Cadence Genus(TM) Synthesis Solution 19.13-s073_1
// Generated on: Aug 19 2025 17:43:11 EDT (Aug 19 2025 21:43:11 UTC)
// Verification Directory fv/top_soc 
module always_on_domain (
	clk_32k, 
	rst_n, 
	sleep_mode, 
	cpu_cmd, 
	cpu_status, 
	gpio_in, 
	gpio_out);
   input clk_32k;
   input rst_n;
   input sleep_mode;
   input [7:0] cpu_cmd;
   output [7:0] cpu_status;
   input [31:0] gpio_in;
   output [31:0] gpio_out;

   assign gpio_out[1] = gpio_in[1] ;
   assign gpio_out[3] = gpio_in[3] ;
   assign gpio_out[5] = gpio_in[5] ;
   assign gpio_out[7] = gpio_in[7] ;
   assign gpio_out[9] = gpio_in[9] ;
   assign gpio_out[11] = gpio_in[11] ;
   assign gpio_out[13] = gpio_in[13] ;
   assign gpio_out[15] = gpio_in[15] ;
   assign gpio_out[17] = gpio_in[17] ;
   assign gpio_out[19] = gpio_in[19] ;
   assign gpio_out[21] = gpio_in[21] ;
   assign gpio_out[23] = gpio_in[23] ;
   assign gpio_out[25] = gpio_in[25] ;
   assign gpio_out[27] = gpio_in[27] ;
   assign gpio_out[29] = gpio_in[29] ;
   assign gpio_out[31] = gpio_in[31] ;
   assign cpu_status[0] = 1'b0 ;
   assign cpu_status[1] = 1'b0 ;
   assign cpu_status[2] = 1'b0 ;
   assign cpu_status[3] = 1'b0 ;
   assign cpu_status[4] = 1'b0 ;
   assign cpu_status[5] = 1'b0 ;
   assign cpu_status[6] = 1'b0 ;
   assign cpu_status[7] = 1'b0 ;

   INV_X1 g49 (.A(gpio_in[2]),
	.ZN(gpio_out[2]));
   INV_X1 g50 (.A(gpio_in[4]),
	.ZN(gpio_out[4]));
   INV_X1 g51 (.A(gpio_in[6]),
	.ZN(gpio_out[6]));
   INV_X1 g52 (.A(gpio_in[8]),
	.ZN(gpio_out[8]));
   INV_X1 g53 (.A(gpio_in[10]),
	.ZN(gpio_out[10]));
   INV_X1 g54 (.A(gpio_in[12]),
	.ZN(gpio_out[12]));
   INV_X1 g55 (.A(gpio_in[14]),
	.ZN(gpio_out[14]));
   INV_X1 g56 (.A(gpio_in[0]),
	.ZN(gpio_out[0]));
   INV_X1 g57 (.A(gpio_in[18]),
	.ZN(gpio_out[18]));
   INV_X1 g58 (.A(gpio_in[20]),
	.ZN(gpio_out[20]));
   INV_X1 g59 (.A(gpio_in[22]),
	.ZN(gpio_out[22]));
   INV_X1 g60 (.A(gpio_in[24]),
	.ZN(gpio_out[24]));
   INV_X1 g61 (.A(gpio_in[26]),
	.ZN(gpio_out[26]));
   INV_X1 g62 (.A(gpio_in[28]),
	.ZN(gpio_out[28]));
   INV_X1 g63 (.A(gpio_in[30]),
	.ZN(gpio_out[30]));
   INV_X1 g64 (.A(gpio_in[16]),
	.ZN(gpio_out[16]));
endmodule

module cpu_core (
	clk, 
	rst_n, 
	enable, 
	data_out, 
	data_out_valid, 
	data_in, 
	data_in_valid, 
	ao_cmd, 
	ao_status, 
	mem_addr, 
	mem_wdata, 
	mem_rdata, 
	mem_we, 
	mem_re);
   input clk;
   input rst_n;
   input enable;
   output [31:0] data_out;
   output data_out_valid;
   input [31:0] data_in;
   input data_in_valid;
   output [7:0] ao_cmd;
   input [7:0] ao_status;
   output [31:0] mem_addr;
   output [31:0] mem_wdata;
   input [31:0] mem_rdata;
   output mem_we;
   output mem_re;

   assign mem_re = enable ;
   assign mem_we = data_out_valid ;
   assign mem_wdata[0] = data_out[0] ;
   assign mem_wdata[1] = data_out[1] ;
   assign mem_wdata[2] = data_out[2] ;
   assign mem_wdata[3] = data_out[3] ;
   assign mem_wdata[4] = data_out[4] ;
   assign mem_wdata[5] = data_out[5] ;
   assign mem_wdata[6] = data_out[6] ;
   assign mem_wdata[7] = data_out[7] ;
   assign mem_wdata[8] = data_out[8] ;
   assign mem_wdata[9] = data_out[9] ;
   assign mem_wdata[10] = data_out[10] ;
   assign mem_wdata[11] = data_out[11] ;
   assign mem_wdata[12] = data_out[12] ;
   assign mem_wdata[13] = data_out[13] ;
   assign mem_wdata[14] = data_out[14] ;
   assign mem_wdata[15] = data_out[15] ;
   assign mem_wdata[16] = data_out[16] ;
   assign mem_wdata[17] = data_out[17] ;
   assign mem_wdata[18] = data_out[18] ;
   assign mem_wdata[19] = data_out[19] ;
   assign mem_wdata[20] = data_out[20] ;
   assign mem_wdata[21] = data_out[21] ;
   assign mem_wdata[22] = data_out[22] ;
   assign mem_wdata[23] = data_out[23] ;
   assign mem_wdata[24] = data_out[24] ;
   assign mem_wdata[25] = data_out[25] ;
   assign mem_wdata[26] = data_out[26] ;
   assign mem_wdata[27] = data_out[27] ;
   assign mem_wdata[28] = data_out[28] ;
   assign mem_wdata[29] = data_out[29] ;
   assign mem_wdata[30] = data_out[30] ;
   assign mem_wdata[31] = data_out[31] ;
   assign mem_addr[0] = 1'b0 ;
   assign mem_addr[1] = data_in[1] ;
   assign mem_addr[2] = data_in[2] ;
   assign mem_addr[3] = data_in[3] ;
   assign mem_addr[4] = data_in[4] ;
   assign mem_addr[5] = data_in[5] ;
   assign mem_addr[6] = data_in[6] ;
   assign mem_addr[7] = data_in[7] ;
   assign mem_addr[8] = data_in[8] ;
   assign mem_addr[9] = data_in[9] ;
   assign mem_addr[10] = data_in[10] ;
   assign mem_addr[11] = data_in[11] ;
   assign mem_addr[12] = data_in[12] ;
   assign mem_addr[13] = data_in[13] ;
   assign mem_addr[14] = data_in[14] ;
   assign mem_addr[15] = data_in[15] ;
   assign mem_addr[16] = data_in[16] ;
   assign mem_addr[17] = data_in[17] ;
   assign mem_addr[18] = data_in[18] ;
   assign mem_addr[19] = data_in[19] ;
   assign mem_addr[20] = data_in[20] ;
   assign mem_addr[21] = data_in[21] ;
   assign mem_addr[22] = data_in[22] ;
   assign mem_addr[23] = data_in[23] ;
   assign mem_addr[24] = data_in[24] ;
   assign mem_addr[25] = data_in[25] ;
   assign mem_addr[26] = data_in[26] ;
   assign mem_addr[27] = data_in[27] ;
   assign mem_addr[28] = data_in[28] ;
   assign mem_addr[29] = data_in[29] ;
   assign mem_addr[30] = data_in[30] ;
   assign mem_addr[31] = data_in[31] ;
   assign ao_cmd[0] = 1'b0 ;
   assign ao_cmd[1] = 1'b0 ;
   assign ao_cmd[2] = 1'b0 ;
   assign ao_cmd[3] = 1'b0 ;
   assign ao_cmd[4] = 1'b0 ;
   assign ao_cmd[5] = 1'b0 ;
   assign ao_cmd[6] = 1'b0 ;
   assign ao_cmd[7] = 1'b0 ;

   AND2_X1 g309__2398 (.A1(enable),
	.A2(data_in_valid),
	.ZN(data_out_valid));
   AND2_X1 g310__5107 (.A1(enable),
	.A2(data_in[30]),
	.ZN(data_out[30]));
   AND2_X1 g311__6260 (.A1(enable),
	.A2(data_in[29]),
	.ZN(data_out[29]));
   AND2_X1 g312__4319 (.A1(enable),
	.A2(data_in[28]),
	.ZN(data_out[28]));
   AND2_X1 g313__8428 (.A1(enable),
	.A2(data_in[27]),
	.ZN(data_out[27]));
   AND2_X1 g314__5526 (.A1(enable),
	.A2(data_in[31]),
	.ZN(data_out[31]));
   AND2_X1 g315__6783 (.A1(enable),
	.A2(data_in[26]),
	.ZN(data_out[26]));
   AND2_X1 g316__3680 (.A1(enable),
	.A2(data_in[25]),
	.ZN(data_out[25]));
   AND2_X1 g317__1617 (.A1(enable),
	.A2(data_in[24]),
	.ZN(data_out[24]));
   AND2_X1 g318__2802 (.A1(enable),
	.A2(data_in[23]),
	.ZN(data_out[23]));
   AND2_X1 g319__1705 (.A1(enable),
	.A2(data_in[22]),
	.ZN(data_out[22]));
   AND2_X1 g320__5122 (.A1(enable),
	.A2(data_in[21]),
	.ZN(data_out[21]));
   AND2_X1 g321__8246 (.A1(enable),
	.A2(data_in[20]),
	.ZN(data_out[20]));
   AND2_X1 g322__7098 (.A1(enable),
	.A2(data_in[19]),
	.ZN(data_out[19]));
   AND2_X1 g323__6131 (.A1(enable),
	.A2(data_in[18]),
	.ZN(data_out[18]));
   AND2_X1 g324__1881 (.A1(enable),
	.A2(data_in[17]),
	.ZN(data_out[17]));
   AND2_X1 g325__5115 (.A1(enable),
	.A2(data_in[16]),
	.ZN(data_out[16]));
   AND2_X1 g326__7482 (.A1(enable),
	.A2(data_in[15]),
	.ZN(data_out[15]));
   AND2_X1 g327__4733 (.A1(enable),
	.A2(data_in[14]),
	.ZN(data_out[14]));
   AND2_X1 g328__6161 (.A1(enable),
	.A2(data_in[13]),
	.ZN(data_out[13]));
   AND2_X1 g329__9315 (.A1(enable),
	.A2(data_in[12]),
	.ZN(data_out[12]));
   AND2_X1 g330__9945 (.A1(enable),
	.A2(data_in[11]),
	.ZN(data_out[11]));
   AND2_X1 g331__2883 (.A1(enable),
	.A2(data_in[10]),
	.ZN(data_out[10]));
   AND2_X1 g332__2346 (.A1(enable),
	.A2(data_in[9]),
	.ZN(data_out[9]));
   AND2_X1 g333__1666 (.A1(enable),
	.A2(data_in[8]),
	.ZN(data_out[8]));
   AND2_X1 g334__7410 (.A1(enable),
	.A2(data_in[7]),
	.ZN(data_out[7]));
   AND2_X1 g335__6417 (.A1(enable),
	.A2(data_in[6]),
	.ZN(data_out[6]));
   AND2_X1 g336__5477 (.A1(enable),
	.A2(data_in[5]),
	.ZN(data_out[5]));
   AND2_X1 g337__2398 (.A1(enable),
	.A2(data_in[4]),
	.ZN(data_out[4]));
   AND2_X1 g338__5107 (.A1(enable),
	.A2(data_in[3]),
	.ZN(data_out[3]));
   AND2_X1 g339__6260 (.A1(enable),
	.A2(data_in[2]),
	.ZN(data_out[2]));
   AND2_X1 g340__4319 (.A1(enable),
	.A2(data_in[1]),
	.ZN(data_out[1]));
   BUF_X1 g341 (.A(enable),
	.Z(data_out[0]));
endmodule

module dsp_block (
	clk, 
	rst_n, 
	enable, 
	data_in, 
	data_in_valid, 
	data_out, 
	data_out_valid);
   input clk;
   input rst_n;
   input enable;
   input [31:0] data_in;
   input data_in_valid;
   output [31:0] data_out;
   output data_out_valid;

   assign data_out[0] = 1'b0 ;

   AND2_X1 g162__8428 (.A1(enable),
	.A2(data_in_valid),
	.ZN(data_out_valid));
   AND2_X1 g164__5526 (.A1(enable),
	.A2(data_in[29]),
	.ZN(data_out[30]));
   AND2_X1 g166__6783 (.A1(enable),
	.A2(data_in[30]),
	.ZN(data_out[31]));
   AND2_X1 g168__3680 (.A1(enable),
	.A2(data_in[28]),
	.ZN(data_out[29]));
   AND2_X1 g170__1617 (.A1(enable),
	.A2(data_in[27]),
	.ZN(data_out[28]));
   AND2_X1 g172__2802 (.A1(enable),
	.A2(data_in[26]),
	.ZN(data_out[27]));
   AND2_X1 g174__1705 (.A1(enable),
	.A2(data_in[25]),
	.ZN(data_out[26]));
   AND2_X1 g176__5122 (.A1(enable),
	.A2(data_in[24]),
	.ZN(data_out[25]));
   AND2_X1 g178__8246 (.A1(enable),
	.A2(data_in[23]),
	.ZN(data_out[24]));
   AND2_X1 g180__7098 (.A1(enable),
	.A2(data_in[22]),
	.ZN(data_out[23]));
   AND2_X1 g182__6131 (.A1(enable),
	.A2(data_in[21]),
	.ZN(data_out[22]));
   AND2_X1 g184__1881 (.A1(enable),
	.A2(data_in[20]),
	.ZN(data_out[21]));
   AND2_X1 g186__5115 (.A1(enable),
	.A2(data_in[19]),
	.ZN(data_out[20]));
   AND2_X1 g188__7482 (.A1(enable),
	.A2(data_in[18]),
	.ZN(data_out[19]));
   AND2_X1 g190__4733 (.A1(enable),
	.A2(data_in[17]),
	.ZN(data_out[18]));
   AND2_X1 g192__6161 (.A1(enable),
	.A2(data_in[16]),
	.ZN(data_out[17]));
   AND2_X1 g194__9315 (.A1(enable),
	.A2(data_in[15]),
	.ZN(data_out[16]));
   AND2_X1 g196__9945 (.A1(enable),
	.A2(data_in[14]),
	.ZN(data_out[15]));
   AND2_X1 g198__2883 (.A1(enable),
	.A2(data_in[13]),
	.ZN(data_out[14]));
   AND2_X1 g200__2346 (.A1(enable),
	.A2(data_in[12]),
	.ZN(data_out[13]));
   AND2_X1 g202__1666 (.A1(enable),
	.A2(data_in[11]),
	.ZN(data_out[12]));
   AND2_X1 g204__7410 (.A1(enable),
	.A2(data_in[10]),
	.ZN(data_out[11]));
   AND2_X1 g206__6417 (.A1(enable),
	.A2(data_in[9]),
	.ZN(data_out[10]));
   AND2_X1 g208__5477 (.A1(enable),
	.A2(data_in[8]),
	.ZN(data_out[9]));
   AND2_X1 g210__2398 (.A1(enable),
	.A2(data_in[7]),
	.ZN(data_out[8]));
   AND2_X1 g212__5107 (.A1(enable),
	.A2(data_in[6]),
	.ZN(data_out[7]));
   AND2_X1 g214__6260 (.A1(enable),
	.A2(data_in[5]),
	.ZN(data_out[6]));
   AND2_X1 g216__4319 (.A1(enable),
	.A2(data_in[4]),
	.ZN(data_out[5]));
   AND2_X1 g218__8428 (.A1(enable),
	.A2(data_in[3]),
	.ZN(data_out[4]));
   AND2_X1 g220__5526 (.A1(enable),
	.A2(data_in[2]),
	.ZN(data_out[3]));
   AND2_X1 g222__6783 (.A1(enable),
	.A2(data_in[1]),
	.ZN(data_out[2]));
   AND2_X1 g224__3680 (.A1(data_in[0]),
	.A2(enable),
	.ZN(data_out[1]));
endmodule

module power_controller (
	clk, 
	rst_n, 
	pwr_cpu_on, 
	pwr_dsp_on, 
	sleep_mode, 
	cpu_iso_en, 
	dsp_iso_en, 
	cpu_save, 
	cpu_restore, 
	dsp_save, 
	dsp_restore);
   input clk;
   input rst_n;
   input pwr_cpu_on;
   input pwr_dsp_on;
   input sleep_mode;
   output cpu_iso_en;
   output dsp_iso_en;
   output cpu_save;
   output cpu_restore;
   output dsp_save;
   output dsp_restore;

   // Internal wires
   wire n_0;
   wire n_5;
   wire n_6;

   INV_X1 g43 (.A(pwr_cpu_on),
	.ZN(n_6));
   INV_X1 g42 (.A(pwr_dsp_on),
	.ZN(n_5));
   INV_X1 g41 (.A(pwr_dsp_on),
	.ZN(dsp_iso_en));
   INV_X1 g39 (.A(pwr_cpu_on),
	.ZN(cpu_iso_en));
   CLKBUF_X1 g45 (.A(pwr_cpu_on),
	.Z(n_0));
   NOR2_X1 g62__1617 (.A1(n_5),
	.A2(sleep_mode),
	.ZN(dsp_restore));
   NOR2_X1 g63__2802 (.A1(n_6),
	.A2(sleep_mode),
	.ZN(cpu_restore));
   NOR2_X1 g64__1705 (.A1(n_0),
	.A2(sleep_mode),
	.ZN(cpu_save));
   NOR2_X1 g65__5122 (.A1(pwr_dsp_on),
	.A2(sleep_mode),
	.ZN(dsp_save));
endmodule

module top_soc (
	clk_main, 
	clk_32k, 
	rst_n, 
	pwr_cpu_on, 
	pwr_dsp_on, 
	sleep_mode, 
	cpu_iso_en, 
	dsp_iso_en, 
	cpu_save, 
	cpu_restore, 
	dsp_save, 
	dsp_restore, 
	gpio_in, 
	gpio_out, 
	mem_addr, 
	mem_wdata, 
	mem_rdata, 
	mem_we, 
	mem_re);
   input clk_main;
   input clk_32k;
   input rst_n;
   input pwr_cpu_on;
   input pwr_dsp_on;
   input sleep_mode;
   output cpu_iso_en;
   output dsp_iso_en;
   output cpu_save;
   output cpu_restore;
   output dsp_save;
   output dsp_restore;
   input [31:0] gpio_in;
   output [31:0] gpio_out;
   output [31:0] mem_addr;
   output [31:0] mem_wdata;
   input [31:0] mem_rdata;
   output mem_we;
   output mem_re;

   // Internal wires
   wire [31:0] dsp_to_cpu_data;
   wire [31:0] cpu_to_dsp_data;
   wire UNCONNECTED;
   wire UNCONNECTED0;
   wire UNCONNECTED1;
   wire UNCONNECTED2;
   wire UNCONNECTED3;
   wire UNCONNECTED4;
   wire UNCONNECTED5;
   wire UNCONNECTED6;
   wire UNCONNECTED7;
   wire UNCONNECTED8;
   wire UNCONNECTED9;
   wire UNCONNECTED10;
   wire UNCONNECTED11;
   wire UNCONNECTED12;
   wire UNCONNECTED13;
   wire UNCONNECTED14;
   wire UNCONNECTED15;
   wire UNCONNECTED16;
   wire UNCONNECTED_HIER_Z;
   wire UNCONNECTED_HIER_Z0;
   wire cpu_to_dsp_valid;
   wire dsp_to_cpu_valid;
   wire n_2;

   assign mem_addr[0] = 1'b0 ;

   always_on_domain u_ao (.clk_32k(clk_32k),
	.rst_n(rst_n),
	.sleep_mode(sleep_mode),
	.cpu_cmd({ 1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0 }),
	.cpu_status({ UNCONNECTED6,
		UNCONNECTED5,
		UNCONNECTED4,
		UNCONNECTED3,
		UNCONNECTED2,
		UNCONNECTED1,
		UNCONNECTED0,
		UNCONNECTED }),
	.gpio_in(gpio_in),
	.gpio_out(gpio_out));
   cpu_core u_cpu (.clk(clk_main),
	.rst_n(rst_n),
	.enable(pwr_cpu_on),
	.data_out(cpu_to_dsp_data),
	.data_out_valid(cpu_to_dsp_valid),
	.data_in({ dsp_to_cpu_data[31],
		dsp_to_cpu_data[30],
		dsp_to_cpu_data[29],
		dsp_to_cpu_data[28],
		dsp_to_cpu_data[27],
		dsp_to_cpu_data[26],
		dsp_to_cpu_data[25],
		dsp_to_cpu_data[24],
		dsp_to_cpu_data[23],
		dsp_to_cpu_data[22],
		dsp_to_cpu_data[21],
		dsp_to_cpu_data[20],
		dsp_to_cpu_data[19],
		dsp_to_cpu_data[18],
		dsp_to_cpu_data[17],
		dsp_to_cpu_data[16],
		dsp_to_cpu_data[15],
		dsp_to_cpu_data[14],
		dsp_to_cpu_data[13],
		dsp_to_cpu_data[12],
		dsp_to_cpu_data[11],
		dsp_to_cpu_data[10],
		dsp_to_cpu_data[9],
		dsp_to_cpu_data[8],
		dsp_to_cpu_data[7],
		dsp_to_cpu_data[6],
		dsp_to_cpu_data[5],
		dsp_to_cpu_data[4],
		dsp_to_cpu_data[3],
		dsp_to_cpu_data[2],
		dsp_to_cpu_data[1],
		1'b0 }),
	.data_in_valid(dsp_to_cpu_valid),
	.ao_cmd({ UNCONNECTED14,
		UNCONNECTED13,
		UNCONNECTED12,
		UNCONNECTED11,
		UNCONNECTED10,
		UNCONNECTED9,
		UNCONNECTED8,
		UNCONNECTED7 }),
	.ao_status({ 1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0 }),
	.mem_addr({ mem_addr[31],
		mem_addr[30],
		mem_addr[29],
		mem_addr[28],
		mem_addr[27],
		mem_addr[26],
		mem_addr[25],
		mem_addr[24],
		mem_addr[23],
		mem_addr[22],
		mem_addr[21],
		mem_addr[20],
		mem_addr[19],
		mem_addr[18],
		mem_addr[17],
		mem_addr[16],
		mem_addr[15],
		mem_addr[14],
		mem_addr[13],
		mem_addr[12],
		mem_addr[11],
		mem_addr[10],
		mem_addr[9],
		mem_addr[8],
		mem_addr[7],
		mem_addr[6],
		mem_addr[5],
		mem_addr[4],
		mem_addr[3],
		mem_addr[2],
		mem_addr[1],
		UNCONNECTED15 }),
	.mem_wdata(mem_wdata),
	.mem_rdata(mem_rdata),
	.mem_we(mem_we),
	.mem_re(mem_re));
   dsp_block u_dsp (.clk(clk_main),
	.rst_n(rst_n),
	.enable(pwr_dsp_on),
	.data_in(cpu_to_dsp_data),
	.data_in_valid(n_2),
	.data_out({ dsp_to_cpu_data[31],
		dsp_to_cpu_data[30],
		dsp_to_cpu_data[29],
		dsp_to_cpu_data[28],
		dsp_to_cpu_data[27],
		dsp_to_cpu_data[26],
		dsp_to_cpu_data[25],
		dsp_to_cpu_data[24],
		dsp_to_cpu_data[23],
		dsp_to_cpu_data[22],
		dsp_to_cpu_data[21],
		dsp_to_cpu_data[20],
		dsp_to_cpu_data[19],
		dsp_to_cpu_data[18],
		dsp_to_cpu_data[17],
		dsp_to_cpu_data[16],
		dsp_to_cpu_data[15],
		dsp_to_cpu_data[14],
		dsp_to_cpu_data[13],
		dsp_to_cpu_data[12],
		dsp_to_cpu_data[11],
		dsp_to_cpu_data[10],
		dsp_to_cpu_data[9],
		dsp_to_cpu_data[8],
		dsp_to_cpu_data[7],
		dsp_to_cpu_data[6],
		dsp_to_cpu_data[5],
		dsp_to_cpu_data[4],
		dsp_to_cpu_data[3],
		dsp_to_cpu_data[2],
		dsp_to_cpu_data[1],
		UNCONNECTED16 }),
	.data_out_valid(dsp_to_cpu_valid));
   power_controller u_pwr_ctrl (.clk(UNCONNECTED_HIER_Z),
	.rst_n(UNCONNECTED_HIER_Z0),
	.pwr_cpu_on(pwr_cpu_on),
	.pwr_dsp_on(pwr_dsp_on),
	.sleep_mode(sleep_mode),
	.cpu_iso_en(cpu_iso_en),
	.dsp_iso_en(dsp_iso_en),
	.cpu_save(cpu_save),
	.cpu_restore(cpu_restore),
	.dsp_save(dsp_save),
	.dsp_restore(dsp_restore));
   CLKBUF_X1 cdn_loop_breaker (.A(cpu_to_dsp_valid),
	.Z(n_2));
endmodule

